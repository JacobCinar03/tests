# .github/workflows/workflow.yml

name: Francinette + Norminette Tests

on:
  workflow_dispatch:

jobs:
  run_francinette_and_norminette:
    name: Run Francinette & Norminette
    runs-on: ubuntu-latest

    env:
      TERM: xterm

    steps:
      # 1. Projeyi checkout et
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Sistem bağımlılıklarını yükle: git, build-essential, Python3 ve pip
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git build-essential python3 python3-pip

      # 3. Python paketlerini yükle: gitpython, halo, toml ve norminette
      #    - gitpython, halo, toml: Francinette’in çalışması için
      #    - norminette: 42 School stil kontrol aracı
      - name: Install Python dependencies
        run: |
          pip3 install --upgrade pip setuptools
          pip3 install gitpython halo toml norminette

      # 4. Eğer pip norminette’i ~/.local/bin içine yüklediyse, bu klasörü PATH’e ekle
      #    (GitHub Actions ortamında ~/.local/bin, varsayılan olarak PATH’te olmayabilir)
      - name: Add pip local bin to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      # 5. Francinette deposunu proje dizininin dışına, /tmp/francinette içine klonla
      #    Böylece proje ve tester dosyaları karışıp "max recursion" hatası oluşmaz.
      - name: Clone francinette outside workspace
        run: |
          git clone https://github.com/xicodomingues/francinette.git /tmp/francinette

      # 6. Çalışma dizinini repo köküne (github.workspace) ayarla ve Francinette’i çalıştır
      #    Bu sayede “Use francinette or paco inside a project folder to run it” kuralına uyuyoruz.
      - name: Run francinette tests
        working-directory: ${{ github.workspace }}
        run: |
          python3 /tmp/francinette/main.py